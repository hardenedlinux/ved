From 5153a9829569cec93e7b1387037be6c2ac12ef9b Mon Sep 17 00:00:00 2001
From: HV TEST <hv-test@hardenedvault.net>
Date: Sat, 1 Oct 2022 06:43:00 +0000
Subject: [PATCH 1/2] lockdown and process integrity protection

---
 Makefile                                      |   6 +-
 src/modules/lockdown/lockdown.c               |  71 +++
 src/modules/lockdown/lockdown.h               |   4 +
 src/modules/process_measurement/hash_utils.c  |  53 ++
 src/modules/process_measurement/hash_utils.h  |   8 +
 .../process_measurement/process_measurement.c | 468 ++++++++++++++++++
 .../process_measurement/process_measurement.h |   9 +
 src/p_lkrg_main.c                             |   8 +-
 src/p_lkrg_main.h                             |   5 +-
 9 files changed, 628 insertions(+), 4 deletions(-)
 create mode 100644 src/modules/lockdown/lockdown.c
 create mode 100644 src/modules/lockdown/lockdown.h
 create mode 100644 src/modules/process_measurement/hash_utils.c
 create mode 100644 src/modules/process_measurement/hash_utils.h
 create mode 100644 src/modules/process_measurement/process_measurement.c
 create mode 100644 src/modules/process_measurement/process_measurement.h

diff --git a/Makefile b/Makefile
index 3c9b1ca..70c0bb9 100644
--- a/Makefile
+++ b/Makefile
@@ -97,8 +97,10 @@ $(TARGET)-objs += src/modules/ksyms/p_resolve_ksym.o \
                   src/modules/exploit_detection/syscalls/p_defense_kfunc_reuse/text_poke/text_poke.o \
                   src/modules/exploit_detection/syscalls/p_defense_kfunc_reuse/p_native_write_cr4/p_native_write_cr4.o \
                   src/modules/exploit_detection/syscalls/self-defense/p_self_defense.o \
-                  src/p_lkrg_main.o
-
+                  src/modules/process_measurement/hash_utils.o \
+                  src/modules/process_measurement/process_measurement.o \
+                  src/modules/lockdown/lockdown.o \
+		  src/p_lkrg_main.o
 
 all:
 #	$(MAKE) -C $(KERNEL) M=$(P_PWD) modules CONFIG_DEBUG_SECTION_MISMATCH=y
diff --git a/src/modules/lockdown/lockdown.c b/src/modules/lockdown/lockdown.c
new file mode 100644
index 0000000..bd294b7
--- /dev/null
+++ b/src/modules/lockdown/lockdown.c
@@ -0,0 +1,71 @@
+// SPDX-License-Identifier: GPL-3.0-only
+/*
+ * Process measurement and integrity protection.
+ *
+ * Copyright (C) 2022 Vault Labs, HardenedVault (https://hardenedvault.net)
+
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/sched.h>
+#include <linux/mm.h>
+#include <crypto/hash.h>
+#include <crypto/sha2.h>
+#include <linux/delay.h>
+#include <linux/timer.h>
+#include <linux/kprobes.h>
+#include <linux/sched/mm.h>
+#include <linux/rwlock_types.h>
+
+#include "lockdown.h"
+
+int vault_lockdown(void){
+	p_lkrg_open_rw();
+
+	/* lockdown mode */
+	P_CTRL(p_vault_lockdown) = 1;
+
+	P_CTRL(p_log_level) = 3;
+	P_CTRL(p_heartbeat) = 0;
+	P_CTRL(p_block_modules) = 1;
+	P_CTRL(p_interval) = 15;
+	P_CTRL(p_kint_validate) = 3;
+	P_CTRL(p_kint_enforce) = 2;
+	P_CTRL(p_msr_validate) = 0;
+	P_CTRL(p_pint_validate) = 1;
+	P_CTRL(p_pint_enforce) = 1;
+	P_CTRL(p_pcfi_validate) = 2;
+	P_CTRL(p_wcfi_validate) = 2;
+	P_CTRL(p_pcfi_enforce) = 1;
+	P_CTRL(p_umh_validate) = 1;
+	P_CTRL(p_umh_enforce) = 1;
+#if defined(CONFIG_X86)
+	P_CTRL(p_smep_validate) = 1;
+	P_CTRL(p_smep_enforce) = 2;
+	P_CTRL(p_smap_validate) = 1;
+	P_CTRL(p_smap_enforce) = 2;
+#endif
+	P_CTRL(p_profile_validate) = 3;
+	P_CTRL(p_profile_enforce) = 2;
+
+	p_lkrg_close_rw();
+
+	p_deregister_comm_channel();
+
+	/* Removed VED in LKM list */
+	list_del_init(&__this_module.list);
+
+    	/* Hide LKM from sysfs */
+    	kobject_del(__this_module.holders_dir->parent);
+
+	p_print_log(P_LOG_ALERT,
+                "<LOCKDOWN> (Exploitation occurs?) - VED entering into lockdown mode: triggered by process[%s | %d] !!!\n",
+                current->comm,task_pid_nr(current));
+	return 0;
+}
diff --git a/src/modules/lockdown/lockdown.h b/src/modules/lockdown/lockdown.h
new file mode 100644
index 0000000..83b8fc5
--- /dev/null
+++ b/src/modules/lockdown/lockdown.h
@@ -0,0 +1,4 @@
+#include "../../p_lkrg_main.h"
+
+int vault_lockdown(void);
+
diff --git a/src/modules/process_measurement/hash_utils.c b/src/modules/process_measurement/hash_utils.c
new file mode 100644
index 0000000..95f422a
--- /dev/null
+++ b/src/modules/process_measurement/hash_utils.c
@@ -0,0 +1,53 @@
+/*
+ *
+ * https://gist.github.com/vkobel/3100cea3625ca765e4153782314bd03d
+
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include "hash_utils.h"
+
+#include <crypto/hash.h>
+
+struct sdesc
+{
+    struct shash_desc shash;
+    char ctx[];
+};
+
+static struct sdesc* init_sdesc(struct crypto_shash* hash_alg)
+{
+    struct sdesc *sdesc;
+    int size;
+
+    size = sizeof(struct shash_desc) + crypto_shash_descsize(hash_alg);
+    sdesc = kmalloc(size, GFP_KERNEL);
+    if (!sdesc)
+        return ERR_PTR(-ENOMEM);
+    sdesc->shash.tfm = hash_alg;
+    return sdesc;
+}
+
+int calc_hash(struct crypto_shash* hash_alg,
+              const unsigned char* data,
+              unsigned int datalen,
+              unsigned char* digest)
+{
+    struct sdesc *sdesc;
+    int ret;
+
+    sdesc = init_sdesc(hash_alg);
+    if (IS_ERR(sdesc))
+    {
+        pr_info("can't alloc sdesc\n");
+        return PTR_ERR(sdesc);
+    }
+
+    ret = crypto_shash_digest(&sdesc->shash, data, datalen, digest);
+    kfree(sdesc);
+    return ret;
+}
+
diff --git a/src/modules/process_measurement/hash_utils.h b/src/modules/process_measurement/hash_utils.h
new file mode 100644
index 0000000..7974df5
--- /dev/null
+++ b/src/modules/process_measurement/hash_utils.h
@@ -0,0 +1,8 @@
+
+#include <crypto/hash.h>
+
+int calc_hash(struct crypto_shash* hash_alg,
+              const unsigned char* data,
+              unsigned int datalen,
+              unsigned char* digest);
+
diff --git a/src/modules/process_measurement/process_measurement.c b/src/modules/process_measurement/process_measurement.c
new file mode 100644
index 0000000..f48b649
--- /dev/null
+++ b/src/modules/process_measurement/process_measurement.c
@@ -0,0 +1,468 @@
+// SPDX-License-Identifier: GPL-3.0-only
+/*
+ * Process measurement and integrity protection.
+ *
+ * Copyright (C) 2022 Vault Labs, HardenedVault (https://hardenedvault.net)
+
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/sched.h>
+#include <linux/mm.h>
+#include <crypto/hash.h>
+#include <crypto/sha2.h>
+#include <linux/delay.h>
+#include <linux/timer.h>
+#include <linux/kprobes.h>
+#include <linux/sched/mm.h>
+#include <linux/rwlock_types.h>
+
+#include "process_measurement.h"
+#include "hash_utils.h"
+
+#define NR_SECTION 3
+
+struct hv_process
+{
+	struct list_head list;
+
+	// list of struct memory_section
+	struct task_struct *task;
+	unsigned char sections_measurement[NR_SECTION][SHA256_DIGEST_SIZE];
+	unsigned char measurement[SHA256_DIGEST_SIZE];
+};
+
+LIST_HEAD(proc_runtime);
+LIST_HEAD(sections_runtime);
+
+#define TIMER_PERIOD (15 * HZ)
+#define TIMER_LOCKDOWN (2 * HZ)
+
+const char *hash_alg_name = "sha256";
+static struct crypto_shash* hash_alg;
+static struct timer_list hv_timer;
+struct hv_process tmp_proc;
+atomic_t v;
+static DEFINE_SPINLOCK(v_lock);
+static DEFINE_RWLOCK(tsklist_lock);
+
+/* --------------------------- kernel_clone handlers ---------------------------- */
+#if 0
+static int kernel_clone_entry_handler(struct kretprobe_instance* ri,
+		struct pt_regs* regs)
+{
+	return 0;
+}
+NOKPROBE_SYMBOL(kernel_clone_entry_handler);
+
+static int kernel_clone_ret_handler(struct kretprobe_instance* ri,
+		struct pt_regs* regs)
+{
+	int i;
+	unsigned long pid;
+	struct task_struct *task;
+
+	pid = regs_return_value(regs);
+	task = get_pid_task(find_get_pid(pid), PIDTYPE_PID);
+
+	if (task->mm == NULL)
+		return 0;
+	else
+		return vault_add_process(task);
+}
+NOKPROBE_SYMBOL(kernel_clone_ret_handler);
+
+static struct kretprobe kernel_clone_kretprobe =
+{
+	.kp = { .symbol_name = "kernel_clone" },
+	.handler          = kernel_clone_ret_handler,
+	.entry_handler    = kernel_clone_entry_handler,
+	// Probe up to 1 instance concurrently
+	.maxactive        = 1,
+};
+#endif
+
+/* ---------------------------- do_exit handlers ---------------------------- */
+
+	static int __kprobes
+do_exit_handler_pre(struct kprobe* p, struct pt_regs* regs)
+{
+	struct hv_process *hvp;
+	struct list_head *iter;
+
+	atomic_inc(&v);
+	//p_print_log(P_LOG_ALERT,"%s[%d], do_exit count: %d\n", current->comm, current->pid, atomic_read(&v));
+	rcu_read_lock();
+	list_for_each(iter, &proc_runtime){
+		hvp = list_entry(iter, struct hv_process, list);
+		if(hvp->task == current){
+			p_print_log(P_LOG_ALERT,"Remove exited process %s[%d] from monitored list!\n", hvp->task->comm, hvp->task->pid);
+			list_del(&hvp->list);
+			kfree(hvp);
+			goto out;
+		}
+	}
+	rcu_read_unlock();
+
+out:
+	atomic_dec(&v);
+	return 0;
+}
+
+	static void __kprobes
+do_exit_handler_post(struct kprobe* p,
+		struct pt_regs* regs,
+		unsigned long flags)
+{
+}
+
+static int do_exit_handler_fault(struct kprobe* p,
+		struct pt_regs* regs,
+		int trapnr)
+{
+	// Return 0 because we don't handle the fault.
+	return 0;
+}
+NOKPROBE_SYMBOL(do_exit_handler_fault);
+
+static struct kprobe do_exit_kprobe =
+{
+	.symbol_name    = "do_exit",
+	.pre_handler    = do_exit_handler_pre,
+	.post_handler   = do_exit_handler_post,
+};
+
+/* ---------------------------- ptrace_may_access() ---------------------------- */
+static bool (*ptrace_may_access_fp)(struct task_struct *task, unsigned int mode);
+
+bool ptrace_may_access_kprobe(struct task_struct *task, unsigned int mode)
+{
+	return ptrace_may_access_fp(task, mode);
+}
+
+static struct kprobe ptrace_may_access_kp =
+{
+	.symbol_name    = "ptrace_may_access",
+};
+
+static int is_new_obj(struct task_struct *tsk)
+{
+	struct hv_process *hvp;
+	struct list_head *iter;
+
+	list_for_each(iter, &proc_runtime){
+		hvp = list_entry(iter, struct hv_process, list);
+
+		if(hvp->task->pid == tsk->pid)
+			return 0;
+	}
+	return 1;
+}
+
+static void hv_timer_callback(struct timer_list* timer)
+{
+	struct hv_process *hvp = NULL, *curr_hvp;
+	struct list_head *iter;
+	struct mm_struct *mm;
+	struct vm_area_struct *vma;
+	struct task_struct *task;
+	int ret = 0;
+
+
+	atomic_inc(&v);
+	//p_print_log(P_LOG_ALERT,"%s[%d], hv_timer count: %d\n", current->comm, current->pid, atomic_read(&v));
+	rcu_read_lock();
+	read_lock(&tsklist_lock);
+	for_each_process(task) {
+		if (task->mm == NULL)
+			continue;
+
+		if (is_new_obj(task)){
+			if(P_CTRL(p_vault_lockdown))
+				send_sig_info(SIGKILL, SEND_SIG_PRIV, task);
+			else
+				vault_add_process(task);
+		}
+	}
+	read_unlock(&tsklist_lock);
+	rcu_read_unlock();
+
+	rcu_read_lock();
+	read_lock(&tsklist_lock);
+	list_for_each(iter, &proc_runtime){
+		int i = NR_SECTION, j = 0;
+		hvp = list_entry(iter, struct hv_process, list);
+		//mm = hvp->task->mm;
+		ret = -ENOENT;
+		mm = get_task_mm(hvp->task);
+
+		if ( mm == NULL){
+			p_print_log(P_LOG_ALERT,"%s[%d]: will be removed from monitored list!\n", hvp->task->comm, hvp->task->pid);
+			spin_lock(&v_lock);
+			list_del(&hvp->list);
+			spin_unlock(&v_lock);
+			kfree(hvp);
+			continue;
+		}
+
+		ret = -EACCES;
+		if (!ptrace_may_access_fp(hvp->task, PTRACE_MODE_READ_FSCREDS)){
+			p_print_log(P_LOG_ALERT,"%s[%d]: ptrace issue\n", hvp->task->comm, hvp->task->pid);
+			//goto out;
+			continue;
+		}
+
+
+		ret = mmap_read_lock_killable(mm);
+		if (ret != 0)
+		{
+			p_print_log(P_LOG_ALERT,"%s[%d]: mmput issue\n", hvp->task->comm, hvp->task->pid);
+			mmput(mm);
+			//goto out;
+			continue;
+		}
+
+		curr_hvp = &tmp_proc;
+		memset(curr_hvp, 0x00, sizeof(tmp_proc));
+		for (vma = mm->mmap, j = 0 ; vma && i-- ; vma = vma->vm_next, j++)
+			section_measurement(vma, hvp->task, curr_hvp->sections_measurement[j]);
+
+		mmap_read_unlock(mm);
+		mmput(mm);
+		ret = calc_hash(hash_alg, (void*)&curr_hvp->sections_measurement, sizeof(hvp->sections_measurement), curr_hvp->measurement);
+		if (memcmp (hvp->measurement, curr_hvp->measurement, sizeof(hvp->measurement))){
+			p_print_log(P_LOG_ALERT,"%s[%d]: will be killed!\n", hvp->task->comm, hvp->task->pid);
+			vault_lockdown();
+			//vault_force_sig(SIGKILL, hvp->task);
+			send_sig_info(SIGKILL, SEND_SIG_PRIV, hvp->task);
+		}
+	}
+	read_unlock(&tsklist_lock);
+	rcu_read_unlock();
+	//show_list_measurement();
+
+//out:
+	atomic_dec(&v);
+	if(P_CTRL(p_vault_lockdown))
+		mod_timer(timer, jiffies + TIMER_LOCKDOWN);
+	else
+		mod_timer(timer, jiffies + TIMER_PERIOD);
+}
+
+int section_measurement(struct vm_area_struct* vma,
+		struct task_struct* task,
+		unsigned char *buffer)
+{
+	unsigned long section_len;
+	int ret = 0;
+	void* memory_ptr;
+
+	if (!vma->vm_file)
+		return ret;
+
+	if (vma->vm_flags & VM_WRITE)
+		return ret;
+
+	section_len = vma->vm_end - vma->vm_start;
+	memory_ptr = kmalloc(section_len, GFP_KERNEL);
+	if (IS_ERR_OR_NULL(memory_ptr))
+	{
+		ret = PTR_ERR(memory_ptr);
+		goto out;
+	}
+
+	ret = access_process_vm(task,
+			vma->vm_start,
+			memory_ptr,
+			section_len,
+			FOLL_FORCE);
+
+	if (ret != section_len)
+	{
+		ret = -EPERM;
+		goto out_free;
+	}
+
+	ret = calc_hash(hash_alg, memory_ptr, section_len, buffer);
+	if (ret != 0)
+		goto out_free;
+
+out_free:
+	kfree(memory_ptr);
+out:
+	return ret;
+}
+
+int show_list_measurement(void)
+{
+	struct hv_process *hvp = NULL;
+	struct list_head *iter;
+
+	list_for_each(iter, &proc_runtime){
+		int i, j=0;
+		hvp = list_entry(iter, struct hv_process, list);
+		if (IS_ERR_OR_NULL(hvp))
+			return PTR_ERR(hvp);
+
+		char hash_buffer[NR_SECTION][2 * sizeof(hvp->sections_measurement[0])] ={0};
+		char measurement[2 * sizeof(hvp->measurement)] ={0};
+
+		for (i = 0; i < NR_SECTION; i++){
+			for (j = 0; j < sizeof(hvp->sections_measurement[0]); j++)
+				sprintf(hash_buffer[i] + 2 * j, "%02x", hvp->sections_measurement[i][j]);
+		}
+
+		for (i = 0; i < sizeof(hvp->measurement); i++)
+			sprintf(measurement + 2 * i, "%02x", hvp->measurement[i]);
+
+//		p_print_log(P_LOG_ALERT,"%s[%d]: %s + %s + %s\n", hvp->task->comm, hvp->task->pid, hash_buffer[0], hash_buffer[1], hash_buffer[2]);
+		p_print_log(P_LOG_ALERT,"%s[%d]: %s\n", hvp->task->comm, hvp->task->pid, measurement);
+	}
+
+	return 0;
+}
+
+
+int vault_add_process(struct task_struct *task)
+{
+	struct mm_struct *mm;
+	struct vm_area_struct *vma;
+	int i = NR_SECTION, j=0;
+	int ret = 0;
+
+	atomic_inc(&v);
+	//p_print_log(P_LOG_ALERT,"%s[%d], hv_timer count: %d\n", current->comm, current->pid, atomic_read(&v));
+
+	struct hv_process *hvp = kmalloc(sizeof(struct hv_process), GFP_KERNEL);
+	if (IS_ERR_OR_NULL(hvp))
+		return PTR_ERR(hvp);
+
+	ret = -EACCES;
+	if (!ptrace_may_access_fp(task, PTRACE_MODE_READ_FSCREDS)){
+		p_print_log(P_LOG_ALERT,"%s[%d]: ptrace issue\n", task->comm, task->pid);
+		goto out;
+	}
+
+	ret = -ENOENT;
+	mm = get_task_mm(task);
+	if (!mm){
+		p_print_log(P_LOG_ALERT,"%s[%d]: get_task_mm() issue\n", task->comm, task->pid);
+		goto out;
+	}
+
+	ret = mmap_read_lock_killable(mm);
+	if (ret != 0)
+	{
+		p_print_log(P_LOG_ALERT,"%s[%d]: mmput issue\n", task->comm, task->pid);
+		mmput(mm);
+		goto out;
+	}
+
+	for (vma = mm->mmap, j = 0 ; vma && i-- ; vma = vma->vm_next, j++) 
+		section_measurement(vma, task, hvp->sections_measurement[j]);
+
+	mmap_read_unlock(mm);
+	mmput(mm);
+
+	ret = calc_hash(hash_alg, (void*)&hvp->sections_measurement, sizeof(hvp->sections_measurement), hvp->measurement);
+
+	hvp->task = task;
+
+	spin_lock(&v_lock);
+	list_add(&hvp->list, &proc_runtime);
+	spin_unlock(&v_lock);
+	p_print_log(P_LOG_ALERT,"%s[%d]: was added to monitored list\n", hvp->task->comm, hvp->task->pid);
+
+	//out_free:
+	//	kfree(memory_ptr);
+out:
+	atomic_dec(&v);
+	return ret;
+}
+
+void delete_all(struct list_head *head)
+{
+	struct list_head *iter;
+	struct hv_process *objPtr;
+
+redo:
+	list_for_each(iter, head) {
+		objPtr = list_entry(iter, struct hv_process, list);
+		list_del(&objPtr->list);
+		kfree(objPtr);
+		goto redo;
+	}
+}
+
+int vault_integrity_init(void){
+	struct task_struct *task;
+	int ret;
+	/*
+	   ret = register_kretprobe(&kernel_clone_kretprobe);
+	   if (ret != 0)
+	   {
+	   p_print_log(P_LOG_ALERT,"register_kretprobe for kernel_clone failed with %d\n", ret);
+	   return ret;
+	   }*/
+
+	ret = register_kprobe(&do_exit_kprobe);
+	if (ret != 0)
+	{
+		p_print_log(P_LOG_ALERT,"register_kprobe for do_exit failed with %d\n", ret);
+		return ret;
+	}
+
+	/* get address of ptrace_may_access */
+	ret = register_kprobe(&ptrace_may_access_kp);
+	if (ret != 0)
+	{
+		p_print_log(P_LOG_ALERT,"register_kprobe for ptrace_may_access failed with %d\n", ret);
+		return ret;
+	}
+	ptrace_may_access_fp = (bool (*) (struct task_struct *, unsigned int))ptrace_may_access_kp.addr;
+
+
+	hash_alg = crypto_alloc_shash(hash_alg_name, 0, 0);
+	if (IS_ERR(hash_alg))
+	{
+		p_print_log(P_LOG_ALERT,"%ld while alloc hash_alg %s\n",
+				PTR_ERR(hash_alg), hash_alg_name);
+		return PTR_ERR(hash_alg);
+	}
+
+	rcu_read_lock();
+	read_lock(&tsklist_lock);
+	for_each_process(task) {
+		if (task->mm == NULL)
+			continue;	
+		vault_add_process(task);
+	}
+
+	read_unlock(&tsklist_lock);
+	rcu_read_unlock();
+
+	show_list_measurement();
+
+	timer_setup(&hv_timer, hv_timer_callback, 0);
+	mod_timer(&hv_timer, jiffies + TIMER_PERIOD);
+	atomic_set(&v, 0);
+	return 0;
+}
+
+void vault_integrity_exit(void)
+{
+	del_timer(&hv_timer);
+	unregister_kprobe(&do_exit_kprobe);
+	unregister_kprobe(&ptrace_may_access_kp);
+	//	unregister_kretprobe(&kernel_clone_kretprobe);
+	crypto_free_shash(hash_alg);
+	delete_all(&proc_runtime);
+
+}
+
diff --git a/src/modules/process_measurement/process_measurement.h b/src/modules/process_measurement/process_measurement.h
new file mode 100644
index 0000000..a3cf536
--- /dev/null
+++ b/src/modules/process_measurement/process_measurement.h
@@ -0,0 +1,9 @@
+#include "../../p_lkrg_main.h"
+void vault_integrity_exit(void);
+int vault_integrity_init(void);
+
+int section_measurement(struct vm_area_struct* vma,
+                       struct task_struct* task,
+                       unsigned char *buffer);
+int vault_add_process(struct task_struct *task);
+int show_list_measurement(void);
diff --git a/src/p_lkrg_main.c b/src/p_lkrg_main.c
index d995db3..2fc1678 100644
--- a/src/p_lkrg_main.c
+++ b/src/p_lkrg_main.c
@@ -73,7 +73,7 @@ p_ro_page p_ro __p_lkrg_read_only = {
       .p_umh_enforce = 1,                 // umh_enforce
       .p_msr_validate = 0,                // msr_validate
       .p_pcfi_validate = 2,               // pcfi_validate
-      .p_pcfi_validate = 1,               // wcfi_validate
+      .p_wcfi_validate = 1,               // wcfi_validate
       .p_pcfi_enforce = 1,                // pcfi_enforce
       /* Profiles */
       .p_profile_validate = 3,            // profile_validate
@@ -530,6 +530,9 @@ static int __init p_lkrg_register(void) {
    p_register_notifiers();
    p_init_page_attr();
 
+#if defined(CONFIG_X86) && LINUX_VERSION_CODE >= KERNEL_VERSION(5,15,0)
+	vault_integrity_init();
+#endif
 
    p_print_log(P_LOG_ALIVE, "VED initialized successfully");
 
@@ -607,6 +610,9 @@ static void __exit p_lkrg_deregister(void) {
    if (ro_guard_timer.function)
        del_timer_sync(&ro_guard_timer);
 
+#if defined(CONFIG_X86) && LINUX_VERSION_CODE >= KERNEL_VERSION(5,15,0)
+   vault_integrity_exit();
+#endif
 
    // Freeze all non-kernel processes
    while (P_SYM(p_freeze_processes)())
diff --git a/src/p_lkrg_main.h b/src/p_lkrg_main.h
index c137fee..b7a0991 100644
--- a/src/p_lkrg_main.h
+++ b/src/p_lkrg_main.h
@@ -179,6 +179,8 @@ typedef struct _p_lkrg_global_conf_structure {
    /* Profiles */
    unsigned int p_profile_validate;
    unsigned int p_profile_enforce;
+   /* Lockdown */
+   unsigned int p_vault_lockdown;
 
 } p_lkrg_global_conf_struct;
 
@@ -407,7 +409,8 @@ static inline int p_lkrg_counter_lock_val_read(p_lkrg_counter_lock *p_arg) {
 #include "modules/exploit_detection/p_exploit_detection.h"    // Exploit Detection
 #include "modules/wrap/p_struct_wrap.h"                       // Wrapping module
 #include "modules/comm_channel/p_comm_channel.h"              // Communication channel (sysctl) module
-
+#include "modules/process_measurement/process_measurement.h"              // Process measurement and protection from code injection
+#include "modules/lockdown/lockdown.h"              // Lockdown mode
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 13, 0)
  #define __GFP_REPEAT   ((__force gfp_t)___GFP_RETRY_MAYFAIL)
-- 
2.34.1

